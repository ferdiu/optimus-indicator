#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import subprocess
import signal
import time

import gi.repository

gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import GObject, Gtk
from gi.repository import AppIndicator3

class OptimusIndicator:
	def __init__(self):
		self.ind = AppIndicator3.Indicator.new("Optimus Indicator", "", AppIndicator3.IndicatorCategory.APPLICATION_STATUS)
		self.ind.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
		self.is_integrated = self.check_integrated()
		self.is_bumblebee = self.check_bumblebee()
		self.ind.set_icon_full('/usr/lib/optimus-indicator/icons/intel.svg', 'intel')
		if not self.is_integrated:
			if self.is_bumblebee:
				self.ind.set_icon_full('/usr/lib/optimus-indicator/icons/bumblebee.svg', 'intel')
			else:
				self.ind.set_icon_full('/usr/lib/optimus-indicator/icons/nvidia.svg', 'intel')
		self.menu_setup()
		self.ind.set_menu(self.menu)
		GObject.timeout_add(3000, self.indicator_loop)

	def indicator_loop(self):
		self.new_status = self.check_integrated()
		self.new_bumblebee = self.check_bumblebee()
		if self.new_status != self.is_integrated or self.new_bumblebee != self.check_bumblebee():
			self.update_icon(self)
			self.is_integrated = self.check_integrated()
			self.is_bumblebee = self.check_bumblebee()
		return True

	def menu_setup(self):
		self.menu = Gtk.Menu()
		self.info_item = Gtk.MenuItem(self.renderer_string())
		self.info_item.set_sensitive(False)
		self.info_item.show()
		self.seperator_item = Gtk.SeparatorMenuItem()
		self.seperator_item.show()
		self.settings_item = Gtk.MenuItem("NVIDIA Settings")
		self.settings_item.connect("activate", self.open_settings)
		self.settings_item.show()
		self.seperator2_item = Gtk.SeparatorMenuItem()
		self.seperator2_item.show()
		self.update_item = Gtk.MenuItem("Controlla se la scheda NVIDIA Ã¨ attiva")
		self.update_item.connect("activate", self.update_icon)
		self.update_item.show()
		self.menu.append(self.info_item)
		self.menu.append(self.seperator_item)
		self.menu.append(self.settings_item)
		self.menu.append(self.seperator2_item)
		self.menu.append(self.update_item)
		self.menu.show_all()
		return self.menu

	def update_icon(self, dude):
		self.is_integrated = self.check_integrated()
		self.is_bumblebee = self.check_bumblebee()
		if self.is_integrated:
			self.ind.set_icon_full('/usr/lib/optimus-indicator/icons/intel.svg', 'intel')
		else:
			if self.is_bumblebee:
				self.ind.set_icon_full('/usr/lib/optimus-indicator/icons/bumblebee.svg', 'bumblebee')
			else:
				self.ind.set_icon_full('/usr/lib/optimus-indicator/icons/nvidia.svg', 'nvidia')
		self.menu_setup()
		self.ind.set_menu(self.menu)

	def open_settings(self, dude):
		self.is_integrated = self.check_integrated()
		self.is_bumblebee = self.check_bumblebee()
		if self.is_integrated:
			os.system("/usr/bin/optirun -b none --failsafe /usr/bin/nvidia-settings -c :8 &")
		else:
			if self.is_bumblebee:
				os.system("/usr/bin/optirun -b none --failsafe /usr/bin/nvidia-settings -c :8 &")
			else:
				os.system("/usr/bin/nvidia-settings &")


	def check_integrated(self):
		out= subprocess.getoutput("/usr/lib/optimus-indicator/check-gpu")
		if "intel" in out:
			return True
		else:
			return False

	def check_bumblebee(self):
		out = subprocess.getoutput("/usr/lib/optimus-indicator/check-nvidia-method")
		if "bumblebee" in out:
			return True
		else:
			return False

	def renderer_string(self):
		self.is_integrated = self.check_integrated()
		self.is_bumblebee = self.check_bumblebee()
		out = subprocess.getoutput('glxinfo | grep "OpenGL renderer string"')
		out = out.replace("OpenGL renderer string", "Xorg is using")
		return out

	def main(self):
		signal.signal(signal.SIGINT, signal.SIG_DFL)
		Gtk.main()

if __name__ == "__main__":
	indicator = OptimusIndicator()
	indicator.main()
